<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\m3_for_arty_a7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\m3_for_arty_a7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Mar 17 15:07:12 2021
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[14]">DAPLinkFittedn</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DAPLinkFittedn</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[14]">DAPLinkFittedn</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[11]">DAP_QSPI0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[13]">DAP_QSPI_XIP_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[12]">DAP_SPI0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[e]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[f]">GPIO1_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[10]">QSPI0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[31]">Reset_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_arty_cm3.o(.text) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[d]">UART0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[17]">Unused_IRQ10</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[18]">Unused_IRQ11</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[19]">Unused_IRQ12</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1a]">Unused_IRQ13</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1b]">Unused_IRQ14</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1c]">Unused_IRQ15</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1d]">Unused_IRQ16</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1e]">Unused_IRQ17</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1f]">Unused_IRQ18</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[20]">Unused_IRQ19</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[21]">Unused_IRQ20</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[22]">Unused_IRQ21</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[23]">Unused_IRQ22</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[24]">Unused_IRQ23</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[25]">Unused_IRQ24</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[26]">Unused_IRQ25</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[27]">Unused_IRQ26</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[28]">Unused_IRQ27</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[29]">Unused_IRQ28</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2a]">Unused_IRQ29</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2b]">Unused_IRQ30</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2c]">Unused_IRQ31</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[15]">Unused_IRQ8</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[16]">Unused_IRQ9</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[32]">__main</a> from __main.o(!!!main) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[30]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[36]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[37]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[71]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[38]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[78]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[3d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[79]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[80]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[81]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[82]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[83]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[85]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[86]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[87]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[88]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[89]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[35]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[96]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[97]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[74]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[41]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[99]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[43]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DAPLinkFittedn</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DAP_QSPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DAP_QSPI_XIP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DAP_SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>QSPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Unused_IRQ10</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Unused_IRQ11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Unused_IRQ12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Unused_IRQ13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Unused_IRQ14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Unused_IRQ15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Unused_IRQ16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Unused_IRQ17</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Unused_IRQ18</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Unused_IRQ19</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Unused_IRQ20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Unused_IRQ21</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Unused_IRQ22</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Unused_IRQ23</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Unused_IRQ24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Unused_IRQ25</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Unused_IRQ26</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Unused_IRQ27</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Unused_IRQ28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Unused_IRQ29</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Unused_IRQ30</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Unused_IRQ31</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Unused_IRQ8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Unused_IRQ9</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Xil_Assert</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xil_assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_GetDataDirection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>

<P><STRONG><a name="[9b]"></a>Xil_AssertSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>XNullHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 684 bytes, Stack size 192 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = main &rArr; AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_button
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pressed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedValue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[46]"></a>InitialiseGPIO</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitialiseGPIO &rArr; XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>EnableGPIOInterrupts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EnableGPIOInterrupts &rArr; XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>GPIO0_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO0_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>button_pressed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>reset_button</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>SetLedValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetLedValue &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>XGpio_CfgInitialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[52]"></a>XGpio_SetDataDirection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[5b]"></a>XGpio_GetDataDirection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[56]"></a>XGpio_DiscreteRead</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_DiscreteRead &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[53]"></a>XGpio_DiscreteWrite</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedValue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[55]"></a>XGpio_InterruptGlobalEnable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[5d]"></a>XGpio_InterruptGlobalDisable</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[54]"></a>XGpio_InterruptEnable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[5f]"></a>XGpio_InterruptDisable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[57]"></a>XGpio_InterruptClear</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Out32
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[60]"></a>XGpio_InterruptGetEnabled</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[61]"></a>XGpio_InterruptGetStatus</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_In32
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[62]"></a>XGpio_LookupConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xgpio_sinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[51]"></a>XGpio_Initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_LookupConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[4b]"></a>AES_init_ctx_iv</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AES_init_ctx_iv &rArr; KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>AES_CBC_encrypt_buffer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AES_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>AES_CBC_decrypt_buffer</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[39]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9d]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[40]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[5e]"></a>Xil_In32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
</UL>

<P><STRONG><a name="[5c]"></a>Xil_Out32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xgpio_intr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
</UL>

<P><STRONG><a name="[63]"></a>KeyExpansion</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
</UL>

<P><STRONG><a name="[68]"></a>AddRoundKey</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[69]"></a>SubBytes</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[6a]"></a>ShiftRows</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, aes_128_cbc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[65]"></a>xtime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes_128_cbc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
</UL>

<P><STRONG><a name="[64]"></a>MixColumns</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[66]"></a>InvMixColumns</STRONG> (Thumb, 1184 bytes, Stack size 48 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[6d]"></a>InvSubBytes</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InvSubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[6c]"></a>InvShiftRows</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, aes_128_cbc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[67]"></a>Cipher</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
</UL>

<P><STRONG><a name="[6b]"></a>InvCipher</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[6e]"></a>XorWithIv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aes_128_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XorWithIv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[30]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
